radar_tools
~~~~~~~~~~~

**radar_tools** is a set of libraries and scripts useful for visualizing and
processing data collected from ice-penetrating radar. The tools operate on the
HDF5 datasets generated by Blue Systems' IceRadar software.

There are two primary ways of using **radar_tools**. The first is to use the
graphical tools, listed below. These tools provide an efficient and simple way
to apply established methodologies for analysing radar data. Pre-written
filters and processing routines are called by typing keywords.

.. image:: https://dl.dropbox.com/u/375008/irlib_bitbucket_images/irview_demo_small.png
    :align: center
    :target: https://dl.dropbox.com/u/375008/irlib_bitbucket_images/irview_demo.png

Above: delimiting an englacial region with the *irview* tool.

The second way is to use the ``irlib`` API directly. This makes it possible to
programmatically analyse radar data from the Python programming language. New
filters and processing routines can be implemented using the API.

.. image:: https://dl.dropbox.com/u/375008/irlib_bitbucket_images/api_demo_small.png
    :align: center
    :target: https://dl.dropbox.com/u/375008/irlib_bitbucket_images/api_demo.png

Above: using IPython to work with the ``irlib`` API.

**New** This is entirely experimental, but with **radar_tools** it's possible
to read CReSIS data without too much trouble. This makes the filters in
``irlib`` available, or is nice if you'd prefer to use Python over MATLAB. An
example of a helper function to load CReSIS \*.mat files is in ``itools.py``

Tools
=====

Graphical tools:
----------------

    :irview:            General purpose viewer for radar lines that doubles
                        as a tool for marking englacial regions
    :icepick:           Pick reflection arrivals from a radar line, either
                        manually or with simple pattern recognition
    :icerate:           Rate reflection quality

Command-line tools:
-------------------

    :h5_dumpmeta:         Dump metadata from an HDF5 survey into a CSV file
    :h5_add_utm:          Add UTM coordinates to an HDF5 survey file (requires
                          *pyproj*)
    :h5_replace_gps:      Replace the coordinates in an HDF5 survey with those
                          from a hand-held GPS
    :h5_generate_cache:   Generate caches to speed loading radar lines
    :h52a:                Export a line from an HDF5 file to ASCII or binary
    :irtrace:             Plot a radar trace acquired at a single location
    :irline:              Plot a radar section along a line of locations

Scripts (not a complete list):
------------------------------

    :batch_line_plot.py:  Plot a range of lines from a single survey
    :picks2xyz.py:      Load the coordinates for data picked by icepick and
                        write and XYZ tab-delimited file
    :join_radar.py:     Combine picking and rating files and calculate ice
                        thicknesses
    :join_*.sh:         Miscellaneous shell scripts that automate the
                        post-picking data processing
    :regen_caches.sh:   Call generate_cache.py for multiple surveys

Python modules:
---------------

    :irlib:             contains several functions and classes used by the
                        above programs, and serves as a programming API for
                        developing new tools and scripts
    :geo_tools:         contains classes and functions for manipulating
                        geographical data in Python

Dependencies:
=============

    **radar_tools** should run anywhere Python and the required dependencies
    work. In the past, I've managed to get it working under Windows, OS X, and
    Linux without too much trouble.

    1. **Python** 2.6+ (<3.x)   dynamic interpretted programming language suited for scientific computing
    #. **Numpy**                numerical array classes for Python (scipy.org)
    #. **Scipy**                science-oriented libraries for Python (scipy.org)
    #. **matplotlib**           plotting for Python (matplotlib.sourceforge.net)
    #. **h5py**                 HDF5 interface for Python (code.google.come/p/h5py)

One way to get the first four dependencies above in one package is to install
the Enthought Python Distribution (http://www.enthought.com/).

Additional useful packages and tools:
-------------------------------------

    1. **Cython**               for generating accelerated filters (cython.org)
    #. **pywavelet**            ``f2py`` wrapper for `Torrence and Compo (1998)` wavelet algorithms (included in *external/pywavelet-0.1*)
    #. **pyproj**               libproj bindings for geo transforms (code.google.com/p/pyproj)

Note on caching:
================

    **icepick**, **irview**, and **icerate** can take advantage of pre-cached data to
    dramatically speed up opening new lines. The ``OpenLine()`` functions have
    ``fromcache`` and ``tocache`` keywords that control this. If a cache does
    not exist, and ``tocache`` is ``True``, then it will be generated once the
    data have been loaded. If ``fromcache`` is ``True``, then the cache will be
    used if it exists.

    The caches include the *Gather* classes, so if these have been updated after
    the cache was generated in a way that affects data storage, the changes
    won't be seen (problematic!).  To fix this, either delete the cache, or run
    the gen_cache.py script to force irlib to regenerate caches from the
    current class definitions. Minor changes that only affect the interface
    will be updated, because Python loads the local class definitions, and only
    stores the data in the caches.

    If you would rather not deal with this at all (and accept slower data
    access), just change the defaults in 'OpenLine()' to 'False' in each of the
    programs.


Detailed descriptions of selected files:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

irview
======

Commands:
---------

        :``help``:                      List possible commands
        :``open`` *line_number*:        Open a new line within current survey
        :``info``:                      Print information about the current line
        :``ls``:                        List the lines in the open survey
        :``gain`` *number*:             Adjust the display gain or report current gain

        :``f`` | ``filter`` *option*:     Apply filter or list filter history
        :``nf`` | ``nofilter``:           Reset filters

        :``dnew`` *description*:        Start digitizing a new feature
        :``dend``:                      End current feature
        :``dls``:                       List digitized features
        :``drm`` *number*:              Remove given feature
        :``dexport``:                   Save to file in englacial/

        :``debug``:                     Jump into a debugging mode (calls ``pdb.set_trace()``)

Digitizing:
-----------

        While the radargram is the active window, pressing *Shift+n* is short for
        ``dnew ""`` (it creates a new digitizing feature with an empty description)

        The left mouse button adds new vertices. The middle mouse button serves
        as "undo". The right mouse button adds a last vertex and ends the
        current feature.

        Exported files simply list the vertices, with features separated in
        blocks.  For further processing see `join_englacial.sh` and
        `line_interp.py`.

        See ``irlib.ApplyFilter()`` for a list of valid filter types. New filters
        can be designed by using the methods in the ``irlib.Gather()`` classes.

License:
~~~~~~~~

    **radar_tools** is provided "as is," without any warranty. Some parts of
    radar_tools are affected by different licensing terms. See `license.txt` for
    detailed licensing information.

