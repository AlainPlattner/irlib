{"name":"Radar tools","tagline":"Tools and Python package for interpretting ice-penetrating radar datasets","body":"*Radar Tools* is a set of libraries and scripts useful for visualizing and\r\nprocessing data collected from ice-penetrating radar. The tools have been\r\ndesigned to work the HDF5 datasets generated by [Blue\r\nSystem](http://www.radar.bluesystem.ca/) IceRadar.\r\n\r\nThere are two primary ways of using *Radar Tools*. The first is to use the\r\ncommand-line and graphical tools, listed below. These tools provide an\r\nefficient and simple way to apply established methodologies for analysing radar\r\ndata. Pre-written filters and processing routines are called by typing\r\ncommands.\r\n\r\n![](http://njwilson23.github.com/radar_tools/images/repo_image.png)\r\n\r\nThe second way is to use the ``irlib`` API directly. This makes it possible to\r\nprogrammatically analyze radar data from the Python programming language. New\r\nfilters and processing routines can be implemented using the API.\r\n\r\nThere is experimental support for reading other types of datasets using\r\n*Radar Tools*. Right now, it's possible to read CReSIS lines, which makes the\r\nfilters in `irlib` available. An example of a helper function to load CReSIS\r\n\\*.mat files is in ``itools.py``\r\n\r\nGraphical tools:\r\n----------------\r\n\r\n- **icepick2**: View radar lines directly and experiment interactively with\r\n  processing filters. Pick reflection arrivals from a radar line, either\r\n  manually or with simple pattern recognition\r\n\r\n- **icerate**: Rate reflection quality using **icepick** output\r\n\r\n- **irview**: General purpose viewer for radar lines that doubles as a tool for\r\n  marking englacial regions **[DEPRECATED]**\r\n\r\nCommand-line tools:\r\n-------------------\r\n\r\n- **h5_dumpmeta**: Dump metadata from an HDF5 survey into a CSV file\r\n- **h5_add_utm**: Add UTM coordinates to an HDF5 survey file (requires\r\n  [**pyproj**](http://code.google.com/p/pyproj/))\r\n- **h5_replace_gps**: Replace the coordinates in an HDF5 survey with those from\r\n  a GPS eXchange (GPX) file\r\n- **h5_generate_cache**: Generate caches to speed loading radar lines\r\n- **h52a**: Export a line from an HDF5 file to ASCII or binary\r\n- **irtrace**: Plot a radar trace acquired at a single location\r\n- **irline**: Plot a radar section along a line of locations\r\n\r\nDependencies:\r\n-------------\r\n\r\n*Radar Tools* should run anywhere Python and the required dependencies work. In\r\nthe past, I've managed to get it working under Windows, OS X, and Linux.\r\n\r\n1. [*Python*](http://www.python.org) 2.6+ (&lt;3.x): dynamic interpretted\r\nprogramming language suited for scientific computing\r\n\r\n2. [*Numpy*](http://www.scipy.org) numerical array classes for Python\r\n\r\n2. [*Scipy*](http://www.scipy.org) science-oriented libraries for Python\r\n\r\n2. [*matplotlib*](http://www.matplotlib.org) plotting for Python\r\n\r\n2. [*h5py*](https://github.com/h5py/h5py): HDF5 interface for Python\r\n\r\nOne way to get the first four dependencies above in one package is to install\r\nthe [Enthought Python Distribution](http://www.enthought.com/).\r\n\r\nAdditional useful packages and tools:\r\n-------------------------------------\r\n\r\n1. [*Cython*](cython.org) for generating accelerated filters (cython.org)\r\n\r\n2. *pywavelet* wrapper for wavelet algorithms (*Torrence and Compo, 1998*)\r\n(included in `external/pywavelet-0.1`)\r\n\r\n2. [*pyproj*](code.google.com/p/pyproj) _libproj_ bindings\r\n\r\nDocumentation:\r\n--------------\r\n\r\nIn addition to the basic information here, documentation can be found in `doc`.\r\nIn order to build the documentation, [Sphinx](http://sphinx-doc.org/) must be\r\ninstalled, with the ``numpydoc`` extension. The extensions can be installed by\r\n\r\n    easy_install numpydoc\r\n\r\nThen, type\r\n\r\n    make html\r\n\r\nIf LaTeX is available, the documentation can be compiled into a PDF. Type\r\n\r\n    make latexpdf\r\n\r\n\r\nChanges in irlib version 0.4-dev\r\n--------------------------------\r\n\r\n*irlib* 0.4 represents significant refactoring and cleaning of both the library\r\nand application design. Breaking changes in the final version will be kept to a\r\nminimum, however the *stable-0.3* branch is available if necessary.\r\n\r\nChanges\r\n~~~~~~~\r\n- remove deprecated methods\r\n- refactor pickable gathers into separate subclasses\r\n- map window\r\n- refactor icepick, irview, icerate into a single codebase, kept in `irlib/app/` (all except icerate)\r\n- build *icepick2* based on the refactored `app` codebase\r\n- modular command system, one of the benefits of which is that additional custom filters can be added easily at runtime and on a project-basis\r\n- rewrite h5_replace_gps to be more robust, handle timezones, and work over multiple days\r\n- some bug fixes and polishing\r\n\r\nTo do\r\n~~~~~\r\n- project config file\r\n- composable line gathers and surveys by overloading arithmetic operators?\r\n- HDF file write?\r\n- PulseEkko data reader?\r\n\r\n\r\n\r\nLicense:\r\n--------\r\n\r\n*Radar Tools* is provided \"as is,\" without any warranty. Some parts of\r\n*Radar Tools* are affected by different licensing terms. See `license.txt` for\r\ndetailed information.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}